/*
    * splitit-web-api-v3
    *
    * Splitit's API
    *
* The version of the OpenAPI document: 1.0.0
* 
* Generated by: https://konfigthis.com
*/

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using Newtonsoft.Json;

using Splitit.Net.Client;
using Splitit.Net.Api;
using Splitit.Net.Model;

namespace Splitit.Net.Test
{
    /// <summary>
    ///  Class for testing InstallmentPlanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstallmentPlanApiTests
    {
        private InstallmentPlanApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            var client = new RestClient("https://id.sandbox.splitit.com/connect/token");
            string clientId = System.Environment.GetEnvironmentVariable("SPLITIT_CLIENT_ID");
            string clientSecret = System.Environment.GetEnvironmentVariable("SPLITIT_CLIENT_SECRET");

            var request = new RestRequest(Method.POST);
            request.AddHeader("cache-control", "no-cache");
            request.AddHeader("content-type", "application/x-www-form-urlencoded");
            request.AddParameter("application/x-www-form-urlencoded", $"grant_type=client_credentials&client_id={clientId}&client_secret={clientSecret}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
            var data = JsonConvert.DeserializeObject(response.Content);
            instance = new InstallmentPlanApi(Configuration.Default);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InstallmentPlanApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' InstallmentPlanApi
            //Assert.IsInstanceOf(typeof(InstallmentPlanApi), instance);
        }


        /// <summary>
        /// Test Cancel
        /// </summary>
        [Test]
        public void CancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.Cancel(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsInstanceOf(typeof(InstallmentPlanCancelResponse), response, "response is InstallmentPlanCancelResponse");
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.Get(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsInstanceOf(typeof(InstallmentPlanModel), response, "response is InstallmentPlanModel");
        }

        /// <summary>
        /// Test Post
        /// </summary>
        [Test]
        public void PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanCreateRequest installmentPlanCreateRequest = null;
            //string xSplititTestMode = null;
            //var response = instance.Post(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode);
            //Assert.IsInstanceOf(typeof(InstallmentPlanModel), response, "response is InstallmentPlanModel");
        }

        /// <summary>
        /// Test Refund
        /// </summary>
        [Test]
        public void RefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanRefundRequest installmentPlanRefundRequest = null;
            //var response = instance.Refund(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest);
            //Assert.IsInstanceOf(typeof(InstallmentPlanRefundResponse), response, "response is InstallmentPlanRefundResponse");
        }

        /// <summary>
        /// Test Search
        /// </summary>
        [Test]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string xSplititIdempotencyKey = "123132131231";
            string installmentPlanNumber = "1231321";
            string refOrderNumber = "1231321312312";
            Dictionary<string, string> extendedParams = null;
            var response = instance.Search(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams);
            Console.Write(response);
            Assert.IsInstanceOf(typeof(InstallmentPlanGetResponse), response, "response is InstallmentPlanGetResponse");
        }

        /// <summary>
        /// Test UpdateOrder
        /// </summary>
        [Test]
        public void UpdateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //UpdateOrderRequest updateOrderRequest = null;
            //var response = instance.UpdateOrder(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest);
            //Assert.IsInstanceOf(typeof(InstallmentPlanUpdateResponse), response, "response is InstallmentPlanUpdateResponse");
        }

        /// <summary>
        /// Test UpdateOrder2
        /// </summary>
        [Test]
        public void UpdateOrder2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier = null;
            //var response = instance.UpdateOrder2(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier);
            //Assert.IsInstanceOf(typeof(InstallmentPlanUpdateResponse), response, "response is InstallmentPlanUpdateResponse");
        }

        /// <summary>
        /// Test VerifyAuthorization
        /// </summary>
        [Test]
        public void VerifyAuthorizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.VerifyAuthorization(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsInstanceOf(typeof(VerifyAuthorizationResponse), response, "response is VerifyAuthorizationResponse");
        }

    }

}
