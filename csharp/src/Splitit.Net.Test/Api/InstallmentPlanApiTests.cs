/*
 * splitit-web-api-v3
 *
 * Splitit's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Splitit.Net.Client;
using Splitit.Net.Api;
// uncomment below to import models
//using Splitit.Net.Model;

namespace Splitit.Net.Test.Api
{
    /// <summary>
    ///  Class for testing InstallmentPlanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstallmentPlanApiTests : IDisposable
    {
        private InstallmentPlanApi instance;

        public InstallmentPlanApiTests()
        {
            instance = new InstallmentPlanApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstallmentPlanApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InstallmentPlanApi
            //Assert.IsType<InstallmentPlanApi>(instance);
        }

        /// <summary>
        /// Test Cancel
        /// </summary>
        [Fact]
        public void CancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.Cancel(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsType<InstallmentPlanCancelResponse>(response);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Fact]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.Get(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsType<InstallmentPlanModel>(response);
        }

        /// <summary>
        /// Test Post
        /// </summary>
        [Fact]
        public void PostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanCreateRequest installmentPlanCreateRequest = null;
            //string xSplititTestMode = null;
            //var response = instance.Post(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode);
            //Assert.IsType<InstallmentPlanModel>(response);
        }

        /// <summary>
        /// Test Refund
        /// </summary>
        [Fact]
        public void RefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanRefundRequest installmentPlanRefundRequest = null;
            //var response = instance.Refund(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest);
            //Assert.IsType<InstallmentPlanRefundResponse>(response);
        }

        /// <summary>
        /// Test Search
        /// </summary>
        [Fact]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //string installmentPlanNumber = null;
            //string refOrderNumber = null;
            //Dictionary<string, string> extendedParams = null;
            //var response = instance.Search(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams);
            //Assert.IsType<InstallmentPlanGetResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrder
        /// </summary>
        [Fact]
        public void UpdateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //UpdateOrderRequest updateOrderRequest = null;
            //var response = instance.UpdateOrder(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest);
            //Assert.IsType<InstallmentPlanUpdateResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrder2
        /// </summary>
        [Fact]
        public void UpdateOrder2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier = null;
            //var response = instance.UpdateOrder2(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier);
            //Assert.IsType<InstallmentPlanUpdateResponse>(response);
        }

        /// <summary>
        /// Test VerifyAuthorization
        /// </summary>
        [Fact]
        public void VerifyAuthorizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.VerifyAuthorization(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsType<VerifyAuthorizationResponse>(response);
        }
    }
}
