/*
    * splitit-web-api-v3
    *
    * Splitit's API
    *
* The version of the OpenAPI document: 1.0.0
* 
* Generated by: https://konfigthis.com
*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Splitit.Net.Client;
using Splitit.Net.Model;

namespace Splitit.Net.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstallmentPlanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>InstallmentPlanCancelResponse</returns>
        InstallmentPlanCancelResponse Cancel (string installmentPlanNumber, string xSplititIdempotencyKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>ApiResponse of InstallmentPlanCancelResponse</returns>
        ApiResponse<InstallmentPlanCancelResponse> CancelWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>InstallmentPlanModel</returns>
        InstallmentPlanModel Get (string installmentPlanNumber, string xSplititIdempotencyKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>ApiResponse of InstallmentPlanModel</returns>
        ApiResponse<InstallmentPlanModel> GetWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <returns>InstallmentPlanModel</returns>
        InstallmentPlanModel Post (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <returns>ApiResponse of InstallmentPlanModel</returns>
        ApiResponse<InstallmentPlanModel> PostWithHttpInfo (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <returns>InstallmentPlanRefundResponse</returns>
        InstallmentPlanRefundResponse Refund (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <returns>ApiResponse of InstallmentPlanRefundResponse</returns>
        ApiResponse<InstallmentPlanRefundResponse> RefundWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <returns>InstallmentPlanGetResponse</returns>
        InstallmentPlanGetResponse Search (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <returns>ApiResponse of InstallmentPlanGetResponse</returns>
        ApiResponse<InstallmentPlanGetResponse> SearchWithHttpInfo (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        InstallmentPlanUpdateResponse UpdateOrder (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        ApiResponse<InstallmentPlanUpdateResponse> UpdateOrderWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        InstallmentPlanUpdateResponse UpdateOrder2 (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        ApiResponse<InstallmentPlanUpdateResponse> UpdateOrder2WithHttpInfo (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>VerifyAuthorizationResponse</returns>
        VerifyAuthorizationResponse VerifyAuthorization (string installmentPlanNumber, string xSplititIdempotencyKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>ApiResponse of VerifyAuthorizationResponse</returns>
        ApiResponse<VerifyAuthorizationResponse> VerifyAuthorizationWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanCancelResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanCancelResponse> CancelAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanCancelResponse>> CancelWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanModel</returns>
        System.Threading.Tasks.Task<InstallmentPlanModel> GetAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanModel>> GetWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanModel</returns>
        System.Threading.Tasks.Task<InstallmentPlanModel> PostAsync (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanModel>> PostWithHttpInfoAsync (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanRefundResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanRefundResponse> RefundAsync (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanRefundResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanRefundResponse>> RefundWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanGetResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanGetResponse> SearchAsync (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanGetResponse>> SearchWithHttpInfoAsync (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrderAsync (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrderWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrder2Async (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrder2WithHttpInfoAsync (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VerifyAuthorizationResponse</returns>
        System.Threading.Tasks.Task<VerifyAuthorizationResponse> VerifyAuthorizationAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VerifyAuthorizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyAuthorizationResponse>> VerifyAuthorizationWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstallmentPlanApi : IInstallmentPlanApi
    {
        private Splitit.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstallmentPlanApi(String basePath)
        {
            this.Configuration = new Splitit.Net.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Splitit.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class
        /// </summary>
        /// <returns></returns>
        public InstallmentPlanApi()
        {
            this.Configuration = Splitit.Net.Client.Configuration.Default;

            ExceptionFactory = Splitit.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstallmentPlanApi(Splitit.Net.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Splitit.Net.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Splitit.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Splitit.Net.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Splitit.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>InstallmentPlanCancelResponse</returns>
        public InstallmentPlanCancelResponse Cancel (string installmentPlanNumber, string xSplititIdempotencyKey)
        {
             ApiResponse<InstallmentPlanCancelResponse> localVarResponse = CancelWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>ApiResponse of InstallmentPlanCancelResponse</returns>
        public ApiResponse<InstallmentPlanCancelResponse> CancelWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Cancel");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Cancel");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanCancelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanCancelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanCancelResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanCancelResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanCancelResponse> CancelAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanCancelResponse> localVarResponse = await CancelWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanCancelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanCancelResponse>> CancelWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Cancel");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Cancel");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanCancelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanCancelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanCancelResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>InstallmentPlanModel</returns>
        public InstallmentPlanModel Get (string installmentPlanNumber, string xSplititIdempotencyKey)
        {
             ApiResponse<InstallmentPlanModel> localVarResponse = GetWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>ApiResponse of InstallmentPlanModel</returns>
        public ApiResponse<InstallmentPlanModel> GetWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Get");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Get");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanModel</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanModel> GetAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanModel> localVarResponse = await GetWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanModel>> GetWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Get");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Get");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <returns>InstallmentPlanModel</returns>
        public InstallmentPlanModel Post (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string))
        {
             ApiResponse<InstallmentPlanModel> localVarResponse = PostWithHttpInfo(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <returns>ApiResponse of InstallmentPlanModel</returns>
        public ApiResponse<InstallmentPlanModel> PostWithHttpInfo (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Post");
            // verify the required parameter 'installmentPlanCreateRequest' is set
            if (installmentPlanCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanCreateRequest' when calling InstallmentPlanApi->Post");

            var localVarPath = "/api/installmentplans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSplititTestMode != null) localVarHeaderParams.Add("X-Splitit-TestMode", this.Configuration.ApiClient.ParameterToString(xSplititTestMode)); // header parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (installmentPlanCreateRequest != null && installmentPlanCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installmentPlanCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installmentPlanCreateRequest; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanModel</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanModel> PostAsync (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanModel> localVarResponse = await PostWithHttpInfoAsync(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanModel>> PostWithHttpInfoAsync (string xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Post");
            // verify the required parameter 'installmentPlanCreateRequest' is set
            if (installmentPlanCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanCreateRequest' when calling InstallmentPlanApi->Post");

            var localVarPath = "/api/installmentplans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSplititTestMode != null) localVarHeaderParams.Add("X-Splitit-TestMode", this.Configuration.ApiClient.ParameterToString(xSplititTestMode)); // header parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (installmentPlanCreateRequest != null && installmentPlanCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installmentPlanCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installmentPlanCreateRequest; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <returns>InstallmentPlanRefundResponse</returns>
        public InstallmentPlanRefundResponse Refund (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest)
        {
             ApiResponse<InstallmentPlanRefundResponse> localVarResponse = RefundWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <returns>ApiResponse of InstallmentPlanRefundResponse</returns>
        public ApiResponse<InstallmentPlanRefundResponse> RefundWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Refund");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Refund");
            // verify the required parameter 'installmentPlanRefundRequest' is set
            if (installmentPlanRefundRequest == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanRefundRequest' when calling InstallmentPlanApi->Refund");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (installmentPlanRefundRequest != null && installmentPlanRefundRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installmentPlanRefundRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installmentPlanRefundRequest; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanRefundResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanRefundResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanRefundResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanRefundResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanRefundResponse> RefundAsync (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanRefundResponse> localVarResponse = await RefundWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanRefundResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanRefundResponse>> RefundWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Refund");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Refund");
            // verify the required parameter 'installmentPlanRefundRequest' is set
            if (installmentPlanRefundRequest == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanRefundRequest' when calling InstallmentPlanApi->Refund");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (installmentPlanRefundRequest != null && installmentPlanRefundRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installmentPlanRefundRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installmentPlanRefundRequest; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanRefundResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanRefundResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanRefundResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <returns>InstallmentPlanGetResponse</returns>
        public InstallmentPlanGetResponse Search (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>))
        {
             ApiResponse<InstallmentPlanGetResponse> localVarResponse = SearchWithHttpInfo(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <returns>ApiResponse of InstallmentPlanGetResponse</returns>
        public ApiResponse<InstallmentPlanGetResponse> SearchWithHttpInfo (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Search");

            var localVarPath = "/api/installmentplans/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "installmentPlanNumber", installmentPlanNumber)); // query parameter
            if (refOrderNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refOrderNumber", refOrderNumber)); // query parameter
            if (extendedParams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extendedParams", extendedParams)); // query parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanGetResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanGetResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanGetResponse> SearchAsync (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanGetResponse> localVarResponse = await SearchWithHttpInfoAsync(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanGetResponse>> SearchWithHttpInfoAsync (string xSplititIdempotencyKey, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Search");

            var localVarPath = "/api/installmentplans/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "installmentPlanNumber", installmentPlanNumber)); // query parameter
            if (refOrderNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refOrderNumber", refOrderNumber)); // query parameter
            if (extendedParams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extendedParams", extendedParams)); // query parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanGetResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        public InstallmentPlanUpdateResponse UpdateOrder (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest)
        {
             ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = UpdateOrderWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        public ApiResponse<InstallmentPlanUpdateResponse> UpdateOrderWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->UpdateOrder");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder");
            // verify the required parameter 'updateOrderRequest' is set
            if (updateOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateOrderRequest' when calling InstallmentPlanApi->UpdateOrder");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/updateorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (updateOrderRequest != null && updateOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateOrderRequest; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanUpdateResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrderAsync (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = await UpdateOrderWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="updateOrderRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrderWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->UpdateOrder");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder");
            // verify the required parameter 'updateOrderRequest' is set
            if (updateOrderRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateOrderRequest' when calling InstallmentPlanApi->UpdateOrder");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/updateorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (updateOrderRequest != null && updateOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateOrderRequest; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanUpdateResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        public InstallmentPlanUpdateResponse UpdateOrder2 (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier)
        {
             ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = UpdateOrder2WithHttpInfo(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        public ApiResponse<InstallmentPlanUpdateResponse> UpdateOrder2WithHttpInfo (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier)
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder2");
            // verify the required parameter 'installmentPlanUpdateRequestByIdentifier' is set
            if (installmentPlanUpdateRequestByIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanUpdateRequestByIdentifier' when calling InstallmentPlanApi->UpdateOrder2");

            var localVarPath = "/api/installmentplans/updateorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (installmentPlanUpdateRequestByIdentifier != null && installmentPlanUpdateRequestByIdentifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installmentPlanUpdateRequestByIdentifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installmentPlanUpdateRequestByIdentifier; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanUpdateResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrder2Async (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = await UpdateOrder2WithHttpInfoAsync(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrder2WithHttpInfoAsync (string xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder2");
            // verify the required parameter 'installmentPlanUpdateRequestByIdentifier' is set
            if (installmentPlanUpdateRequestByIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanUpdateRequestByIdentifier' when calling InstallmentPlanApi->UpdateOrder2");

            var localVarPath = "/api/installmentplans/updateorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter
            if (installmentPlanUpdateRequestByIdentifier != null && installmentPlanUpdateRequestByIdentifier.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installmentPlanUpdateRequestByIdentifier); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installmentPlanUpdateRequestByIdentifier; // byte array
            }

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstallmentPlanUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstallmentPlanUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstallmentPlanUpdateResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>VerifyAuthorizationResponse</returns>
        public VerifyAuthorizationResponse VerifyAuthorization (string installmentPlanNumber, string xSplititIdempotencyKey)
        {
             ApiResponse<VerifyAuthorizationResponse> localVarResponse = VerifyAuthorizationWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <returns>ApiResponse of VerifyAuthorizationResponse</returns>
        public ApiResponse<VerifyAuthorizationResponse> VerifyAuthorizationWithHttpInfo (string installmentPlanNumber, string xSplititIdempotencyKey)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->VerifyAuthorization");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->VerifyAuthorization");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/verifyauthorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAuthorization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyAuthorizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyAuthorizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyAuthorizationResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VerifyAuthorizationResponse</returns>
        public async System.Threading.Tasks.Task<VerifyAuthorizationResponse> VerifyAuthorizationAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VerifyAuthorizationResponse> localVarResponse = await VerifyAuthorizationWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VerifyAuthorizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyAuthorizationResponse>> VerifyAuthorizationWithHttpInfoAsync (string installmentPlanNumber, string xSplititIdempotencyKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
                throw new ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->VerifyAuthorization");
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
                throw new ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->VerifyAuthorization");

            var localVarPath = "/api/installmentplans/{installmentPlanNumber}/verifyauthorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (installmentPlanNumber != null) localVarPathParams.Add("installmentPlanNumber", this.Configuration.ApiClient.ParameterToString(installmentPlanNumber)); // path parameter
            if (xSplititIdempotencyKey != null) localVarHeaderParams.Add("X-Splitit-IdempotencyKey", this.Configuration.ApiClient.ParameterToString(xSplititIdempotencyKey)); // header parameter

            // authentication (bearer) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAuthorization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyAuthorizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyAuthorizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyAuthorizationResponse)));
        }

    }
}
