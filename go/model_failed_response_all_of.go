/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// FailedResponseAllOf struct for FailedResponseAllOf
type FailedResponseAllOf struct {
	TraceId *string `json:"TraceId,omitempty"`
	Error *ErrorExtended `json:"Error,omitempty"`
}

// NewFailedResponseAllOf instantiates a new FailedResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedResponseAllOf() *FailedResponseAllOf {
	this := FailedResponseAllOf{}
	return &this
}

// NewFailedResponseAllOfWithDefaults instantiates a new FailedResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedResponseAllOfWithDefaults() *FailedResponseAllOf {
	this := FailedResponseAllOf{}
	return &this
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *FailedResponseAllOf) GetTraceId() string {
	if o == nil || isNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedResponseAllOf) GetTraceIdOk() (*string, bool) {
	if o == nil || isNil(o.TraceId) {
    return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *FailedResponseAllOf) HasTraceId() bool {
	if o != nil && !isNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *FailedResponseAllOf) SetTraceId(v string) {
	o.TraceId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *FailedResponseAllOf) GetError() ErrorExtended {
	if o == nil || isNil(o.Error) {
		var ret ErrorExtended
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedResponseAllOf) GetErrorOk() (*ErrorExtended, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *FailedResponseAllOf) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorExtended and assigns it to the Error field.
func (o *FailedResponseAllOf) SetError(v ErrorExtended) {
	o.Error = &v
}

func (o FailedResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TraceId) {
		toSerialize["TraceId"] = o.TraceId
	}
	if !isNil(o.Error) {
		toSerialize["Error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableFailedResponseAllOf struct {
	value *FailedResponseAllOf
	isSet bool
}

func (v NullableFailedResponseAllOf) Get() *FailedResponseAllOf {
	return v.value
}

func (v *NullableFailedResponseAllOf) Set(val *FailedResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedResponseAllOf(val *FailedResponseAllOf) *NullableFailedResponseAllOf {
	return &NullableFailedResponseAllOf{value: val, isSet: true}
}

func (v NullableFailedResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


