/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// InstallmentPlanGetResponseAllOf struct for InstallmentPlanGetResponseAllOf
type InstallmentPlanGetResponseAllOf struct {
	PlanList []InstallmentPlanModel `json:"PlanList,omitempty"`
}

// NewInstallmentPlanGetResponseAllOf instantiates a new InstallmentPlanGetResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPlanGetResponseAllOf() *InstallmentPlanGetResponseAllOf {
	this := InstallmentPlanGetResponseAllOf{}
	return &this
}

// NewInstallmentPlanGetResponseAllOfWithDefaults instantiates a new InstallmentPlanGetResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPlanGetResponseAllOfWithDefaults() *InstallmentPlanGetResponseAllOf {
	this := InstallmentPlanGetResponseAllOf{}
	return &this
}

// GetPlanList returns the PlanList field value if set, zero value otherwise.
func (o *InstallmentPlanGetResponseAllOf) GetPlanList() []InstallmentPlanModel {
	if o == nil || isNil(o.PlanList) {
		var ret []InstallmentPlanModel
		return ret
	}
	return o.PlanList
}

// GetPlanListOk returns a tuple with the PlanList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanGetResponseAllOf) GetPlanListOk() ([]InstallmentPlanModel, bool) {
	if o == nil || isNil(o.PlanList) {
    return nil, false
	}
	return o.PlanList, true
}

// HasPlanList returns a boolean if a field has been set.
func (o *InstallmentPlanGetResponseAllOf) HasPlanList() bool {
	if o != nil && !isNil(o.PlanList) {
		return true
	}

	return false
}

// SetPlanList gets a reference to the given []InstallmentPlanModel and assigns it to the PlanList field.
func (o *InstallmentPlanGetResponseAllOf) SetPlanList(v []InstallmentPlanModel) {
	o.PlanList = v
}

func (o InstallmentPlanGetResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PlanList) {
		toSerialize["PlanList"] = o.PlanList
	}
	return json.Marshal(toSerialize)
}

type NullableInstallmentPlanGetResponseAllOf struct {
	value *InstallmentPlanGetResponseAllOf
	isSet bool
}

func (v NullableInstallmentPlanGetResponseAllOf) Get() *InstallmentPlanGetResponseAllOf {
	return v.value
}

func (v *NullableInstallmentPlanGetResponseAllOf) Set(val *InstallmentPlanGetResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPlanGetResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPlanGetResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPlanGetResponseAllOf(val *InstallmentPlanGetResponseAllOf) *NullableInstallmentPlanGetResponseAllOf {
	return &NullableInstallmentPlanGetResponseAllOf{value: val, isSet: true}
}

func (v NullableInstallmentPlanGetResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPlanGetResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


