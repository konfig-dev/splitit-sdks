/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// InstallmentPlanRefundResponseAllOf struct for InstallmentPlanRefundResponseAllOf
type InstallmentPlanRefundResponseAllOf struct {
	RefundId *string `json:"RefundId,omitempty"`
	InstallmentPlanNumber *string `json:"InstallmentPlanNumber,omitempty"`
	Currency *string `json:"Currency,omitempty"`
	NonCreditRefundAmount *float32 `json:"NonCreditRefundAmount,omitempty"`
	CreditRefundAmount *float32 `json:"CreditRefundAmount,omitempty"`
	Summary *RefundSummary `json:"Summary,omitempty"`
}

// NewInstallmentPlanRefundResponseAllOf instantiates a new InstallmentPlanRefundResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPlanRefundResponseAllOf() *InstallmentPlanRefundResponseAllOf {
	this := InstallmentPlanRefundResponseAllOf{}
	return &this
}

// NewInstallmentPlanRefundResponseAllOfWithDefaults instantiates a new InstallmentPlanRefundResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPlanRefundResponseAllOfWithDefaults() *InstallmentPlanRefundResponseAllOf {
	this := InstallmentPlanRefundResponseAllOf{}
	return &this
}

// GetRefundId returns the RefundId field value if set, zero value otherwise.
func (o *InstallmentPlanRefundResponseAllOf) GetRefundId() string {
	if o == nil || isNil(o.RefundId) {
		var ret string
		return ret
	}
	return *o.RefundId
}

// GetRefundIdOk returns a tuple with the RefundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRefundResponseAllOf) GetRefundIdOk() (*string, bool) {
	if o == nil || isNil(o.RefundId) {
    return nil, false
	}
	return o.RefundId, true
}

// HasRefundId returns a boolean if a field has been set.
func (o *InstallmentPlanRefundResponseAllOf) HasRefundId() bool {
	if o != nil && !isNil(o.RefundId) {
		return true
	}

	return false
}

// SetRefundId gets a reference to the given string and assigns it to the RefundId field.
func (o *InstallmentPlanRefundResponseAllOf) SetRefundId(v string) {
	o.RefundId = &v
}

// GetInstallmentPlanNumber returns the InstallmentPlanNumber field value if set, zero value otherwise.
func (o *InstallmentPlanRefundResponseAllOf) GetInstallmentPlanNumber() string {
	if o == nil || isNil(o.InstallmentPlanNumber) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanNumber
}

// GetInstallmentPlanNumberOk returns a tuple with the InstallmentPlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRefundResponseAllOf) GetInstallmentPlanNumberOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentPlanNumber) {
    return nil, false
	}
	return o.InstallmentPlanNumber, true
}

// HasInstallmentPlanNumber returns a boolean if a field has been set.
func (o *InstallmentPlanRefundResponseAllOf) HasInstallmentPlanNumber() bool {
	if o != nil && !isNil(o.InstallmentPlanNumber) {
		return true
	}

	return false
}

// SetInstallmentPlanNumber gets a reference to the given string and assigns it to the InstallmentPlanNumber field.
func (o *InstallmentPlanRefundResponseAllOf) SetInstallmentPlanNumber(v string) {
	o.InstallmentPlanNumber = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *InstallmentPlanRefundResponseAllOf) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRefundResponseAllOf) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *InstallmentPlanRefundResponseAllOf) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *InstallmentPlanRefundResponseAllOf) SetCurrency(v string) {
	o.Currency = &v
}

// GetNonCreditRefundAmount returns the NonCreditRefundAmount field value if set, zero value otherwise.
func (o *InstallmentPlanRefundResponseAllOf) GetNonCreditRefundAmount() float32 {
	if o == nil || isNil(o.NonCreditRefundAmount) {
		var ret float32
		return ret
	}
	return *o.NonCreditRefundAmount
}

// GetNonCreditRefundAmountOk returns a tuple with the NonCreditRefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRefundResponseAllOf) GetNonCreditRefundAmountOk() (*float32, bool) {
	if o == nil || isNil(o.NonCreditRefundAmount) {
    return nil, false
	}
	return o.NonCreditRefundAmount, true
}

// HasNonCreditRefundAmount returns a boolean if a field has been set.
func (o *InstallmentPlanRefundResponseAllOf) HasNonCreditRefundAmount() bool {
	if o != nil && !isNil(o.NonCreditRefundAmount) {
		return true
	}

	return false
}

// SetNonCreditRefundAmount gets a reference to the given float32 and assigns it to the NonCreditRefundAmount field.
func (o *InstallmentPlanRefundResponseAllOf) SetNonCreditRefundAmount(v float32) {
	o.NonCreditRefundAmount = &v
}

// GetCreditRefundAmount returns the CreditRefundAmount field value if set, zero value otherwise.
func (o *InstallmentPlanRefundResponseAllOf) GetCreditRefundAmount() float32 {
	if o == nil || isNil(o.CreditRefundAmount) {
		var ret float32
		return ret
	}
	return *o.CreditRefundAmount
}

// GetCreditRefundAmountOk returns a tuple with the CreditRefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRefundResponseAllOf) GetCreditRefundAmountOk() (*float32, bool) {
	if o == nil || isNil(o.CreditRefundAmount) {
    return nil, false
	}
	return o.CreditRefundAmount, true
}

// HasCreditRefundAmount returns a boolean if a field has been set.
func (o *InstallmentPlanRefundResponseAllOf) HasCreditRefundAmount() bool {
	if o != nil && !isNil(o.CreditRefundAmount) {
		return true
	}

	return false
}

// SetCreditRefundAmount gets a reference to the given float32 and assigns it to the CreditRefundAmount field.
func (o *InstallmentPlanRefundResponseAllOf) SetCreditRefundAmount(v float32) {
	o.CreditRefundAmount = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *InstallmentPlanRefundResponseAllOf) GetSummary() RefundSummary {
	if o == nil || isNil(o.Summary) {
		var ret RefundSummary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRefundResponseAllOf) GetSummaryOk() (*RefundSummary, bool) {
	if o == nil || isNil(o.Summary) {
    return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *InstallmentPlanRefundResponseAllOf) HasSummary() bool {
	if o != nil && !isNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given RefundSummary and assigns it to the Summary field.
func (o *InstallmentPlanRefundResponseAllOf) SetSummary(v RefundSummary) {
	o.Summary = &v
}

func (o InstallmentPlanRefundResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RefundId) {
		toSerialize["RefundId"] = o.RefundId
	}
	if !isNil(o.InstallmentPlanNumber) {
		toSerialize["InstallmentPlanNumber"] = o.InstallmentPlanNumber
	}
	if !isNil(o.Currency) {
		toSerialize["Currency"] = o.Currency
	}
	if !isNil(o.NonCreditRefundAmount) {
		toSerialize["NonCreditRefundAmount"] = o.NonCreditRefundAmount
	}
	if !isNil(o.CreditRefundAmount) {
		toSerialize["CreditRefundAmount"] = o.CreditRefundAmount
	}
	if !isNil(o.Summary) {
		toSerialize["Summary"] = o.Summary
	}
	return json.Marshal(toSerialize)
}

type NullableInstallmentPlanRefundResponseAllOf struct {
	value *InstallmentPlanRefundResponseAllOf
	isSet bool
}

func (v NullableInstallmentPlanRefundResponseAllOf) Get() *InstallmentPlanRefundResponseAllOf {
	return v.value
}

func (v *NullableInstallmentPlanRefundResponseAllOf) Set(val *InstallmentPlanRefundResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPlanRefundResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPlanRefundResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPlanRefundResponseAllOf(val *InstallmentPlanRefundResponseAllOf) *NullableInstallmentPlanRefundResponseAllOf {
	return &NullableInstallmentPlanRefundResponseAllOf{value: val, isSet: true}
}

func (v NullableInstallmentPlanRefundResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPlanRefundResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


