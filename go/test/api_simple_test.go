/*
splitit-web-api-v3

Testing InstallmentPlanApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package splitit

import (
	"fmt"
	"os"
	"testing"

	client "github.com/konfig-dev/splitit-sdks/go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_simple(t *testing.T) {
	clientId := os.Getenv("SPLITIT_CLIENT_ID")
	clientSecret := os.Getenv("SPLITIT_CLIENT_SECRET")
	configuration := client.NewConfiguration()
	configuration.SetOAuthClientCredentials(clientId, clientSecret)
	apiClient := client.NewAPIClient(configuration)

	t.Run("Test Simple", func(t *testing.T) {

		Currency := "USD"
		Email := "fake@email.com"
		AddressLine1 := "144 Union St"
		City := "Brooklyn"
		State := "North Dakota"
		Zip := "11231"
		Country := "United States"
		CardExpMonth := "12"
		CardExpYear := "2025"
		CardCvv := "111"
		CardNumber := "4556997457604103"
		CardHolderFullName := "Test User"

		installmentPlanCreateRequest := &client.InstallmentPlanCreateRequest{
			Attempt3dSecure:            true,
			AutoCapture:                true,
			AttemptAuthorize:           true,
			TermsAndConditionsAccepted: true,
			PlanData: &client.PlanDataModel{
				TotalAmount:          10.0,
				NumberOfInstallments: 10,
				Currency:             &Currency,
				PurchaseMethod:       client.PURCHASEMETHOD_IN_STORE,
			},
			Shopper: &client.ShopperData{
				Email: &Email,
			},
			BillingAddress: &client.AddressDataModel{
				AddressLine1: &AddressLine1,
				City:         &City,
				State:        &State,
				Zip:          &Zip,
				Country:      &Country,
			},
			PaymentMethod: &client.PaymentMethodModel{
				Type: client.PAYMENTMETHODTYPE_CARD,
				Card: &client.CardData{
					CardExpMonth:       &CardExpMonth,
					CardExpYear:        &CardExpYear,
					CardCvv:            &CardCvv,
					CardNumber:         &CardNumber,
					CardHolderFullName: &CardHolderFullName,
				},
			},
		}

		r := apiClient.InstallmentPlanApi.Post()
		r = r.InstallmentPlanCreateRequest(*installmentPlanCreateRequest)
		xSplititIdempotencyKey := "1234"
		r = r.XSplititIdempotencyKey(xSplititIdempotencyKey)
		fmt.Printf("%+v\n", r)

		resp, httpRes, err := r.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
