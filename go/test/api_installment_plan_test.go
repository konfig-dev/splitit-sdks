/*
splitit-web-api-v3

Testing InstallmentPlanApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package splitit

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "github.com/konfig-dev/splitit-sdks/go"
)

func Test_splitit_InstallmentPlanApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test InstallmentPlanApiService Cancel", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var installmentPlanNumber string

        resp, httpRes, err := apiClient.InstallmentPlanApi.Cancel(context.Background(), installmentPlanNumber).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService Get", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var installmentPlanNumber string

        resp, httpRes, err := apiClient.InstallmentPlanApi.Get(context.Background(), installmentPlanNumber).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService Post", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InstallmentPlanApi.Post(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService Refund", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var installmentPlanNumber string

        resp, httpRes, err := apiClient.InstallmentPlanApi.Refund(context.Background(), installmentPlanNumber).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService Search", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InstallmentPlanApi.Search(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService UpdateOrder", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var installmentPlanNumber string

        resp, httpRes, err := apiClient.InstallmentPlanApi.UpdateOrder(context.Background(), installmentPlanNumber).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService UpdateOrder2", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InstallmentPlanApi.UpdateOrder2(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstallmentPlanApiService VerifyAuthorization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var installmentPlanNumber string

        resp, httpRes, err := apiClient.InstallmentPlanApi.VerifyAuthorization(context.Background(), installmentPlanNumber).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
